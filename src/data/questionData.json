[
    {
      "id": 1,
      "question": "In JavaScript, how can you handle asynchronous operations while ensuring that errors are caught and managed appropriately?",
      "options": [
          "Using Promises and the `.catch()` method to handle errors after the promise has been rejected",
          "Utilizing the `setTimeout` function to delay execution and catch errors using traditional `try/catch` blocks",
          "Employing async/await syntax with `try/catch` blocks to manage errors in asynchronous code",
          "Leveraging callback functions with explicit error handling in each callback to address potential issues"
      ]
    },
    {
      "id": 2,
      "question": "What is Node.js?",
      "options": [
          "A web browser",
          "A JavaScript runtime",
          "A database",
          "A programming language"
      ]
    },
    {
      "id": 3,
      "question": "What is a Closure in JavaScript?",
      "options": [
          "A function paired with its lexical environment",
          "A type of variable",
          "A new data type",
          "A block of code executed later"
      ]
    },
    {
      "id": 4,
      "question": "What is the use of the `this` keyword in JavaScript?",
      "options": [
          "It refers to the object from which it was called",
          "It refers to a global variable",
          "It creates a new scope",
          "It is used for exception handling"
      ]
    }
  ]
  